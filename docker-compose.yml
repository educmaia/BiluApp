# docker-compose.yml - Versão final com build do frontend para máxima compatibilidade
version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    container_name: biluapp_postgres
    environment:
      POSTGRES_USER: ifsp_user
      POSTGRES_PASSWORD: senha_segura
      POSTGRES_DB: conhecimento_ifsp
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - biluapp_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ifsp_user -d conhecimento_ifsp"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: biluapp_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - biluapp_network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: biluapp_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - biluapp_network
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: biluapp_backend
    working_dir: /app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://ifsp_user:senha_segura@postgres:5432/conhecimento_ifsp
      REDIS_URL: redis://:redis_password@redis:6379/0
      ELASTICSEARCH_URL: http://elasticsearch:9200
      PYTHONUNBUFFERED: 1 # Garante que os logs apareçam em tempo real
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./backend:/app # Monta o código para permitir o hot-reload com --reload
    networks:
      - biluapp_network
    restart: unless-stopped

  frontend:
    # ✅ CORREÇÃO: Constrói uma imagem local para o frontend usando o Dockerfile
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: biluapp_frontend
    ports:
      - "80:80"
    # O volume do nginx.conf foi removido pois agora faz parte da imagem
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
    depends_on:
      - backend
    networks:
      - biluapp_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:

networks:
  biluapp_network:
    driver: bridge
